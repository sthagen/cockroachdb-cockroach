rules
----
joinTarget(element, target):
    - $target[Type] = '*scpb.Target'
    - $target[Element] = $element
    - $element[DescID] = $_
joinTargetNode(element, target, node):
    - joinTarget($element, $target)
    - $node[Type] = '*screl.Node'
    - $node[Target] = $target
toAbsent(target1, target2):
    - $target1[TargetStatus] = ABSENT
    - $target2[TargetStatus] = ABSENT
toAbsentInDropped(target1, node1, target2, node2):
    - toAbsent($target1, $target2)
    - $node1[CurrentStatus] = DROPPED
    - $node2[CurrentStatus] = DROPPED
toAbsentInAbsent(target1, node1, target2, node2):
    - toAbsent($target1, $target2)
    - $node1[CurrentStatus] = ABSENT
    - $node2[CurrentStatus] = ABSENT
joinReferencedDescID(referrer, referenced, id):
    - $referrer[ReferencedDescID] = $id
    - $referenced[DescID] = $id
joinOnDescID(a, b, id):
    - $a[DescID] = $id
    - $b[DescID] = $id
joinOnIndexID(a, b, desc-id, index-id):
    - joinOnDescID($a, $b, $desc-id)
    - $a[IndexID] = $index-id
    - $b[IndexID] = $index-id
joinOnColumnID(a, b, desc-id, col-id):
    - joinOnDescID($a, $b, $desc-id)
    - $a[ColumnID] = $col-id
    - $b[ColumnID] = $col-id
joinOnConstraintID(a, b, desc-id, constraint-id):
    - joinOnDescID($a, $b, $desc-id)
    - $a[ConstraintID] = $constraint-id
    - $b[ConstraintID] = $constraint-id


deprules
----
- name: view drops before the types, views and tables it depends on
  from: view-node
  kind: Precedence
  to: dependents-node
  query:
    - $view[Type] = '*scpb.View'
    - $dependents[Type] IN ['*scpb.AliasType', '*scpb.EnumType', '*scpb.View', '*scpb.Table']
    - toAbsentInDropped($view-target, $view-node, $dependents-target, $dependents-node)
    - ViewDependsOn(*scpb.View, scpb.Element)($view, $dependents)
    - joinTargetNode($view, $view-target, $view-node)
    - joinTargetNode($dependents, $dependents-target, $dependents-node)
- name: alias type drops before the types it depends on
  from: alias-node
  kind: Precedence
  to: alias-dep-node
  query:
    - $alias[Type] = '*scpb.AliasType'
    - $alias-dep[Type] IN ['*scpb.AliasType', '*scpb.EnumType']
    - toAbsentInDropped($alias-target, $alias-node, $alias-dep-target, $alias-dep-node)
    - aliasTypeDependsOn(*scpb.AliasType, scpb.Element)($alias, $alias-dep)
    - joinTargetNode($alias, $alias-target, $alias-node)
    - joinTargetNode($alias-dep, $alias-dep-target, $alias-dep-node)
- name: array type drops right before its element enum type
  from: alias-node
  kind: SameStagePrecedence
  to: enum-node
  query:
    - $alias[Type] = '*scpb.AliasType'
    - $enum[Type] = '*scpb.EnumType'
    - toAbsentInDropped($alias-target, $alias-node, $enum-target, $enum-node)
    - joinArrayTypeWithEnumType(*scpb.AliasType, *scpb.EnumType)($alias, $enum)
    - joinTargetNode($alias, $alias-target, $alias-node)
    - joinTargetNode($enum, $enum-target, $enum-node)
- name: schema dropped before parent database
  from: schema-parent-node
  kind: Precedence
  to: database-node
  query:
    - $schema-parent[Type] = '*scpb.SchemaParent'
    - $database[Type] = '*scpb.Database'
    - toAbsent($schema-parent-target, $database-target)
    - $schema-parent-node[CurrentStatus] = ABSENT
    - $database-node[CurrentStatus] = DROPPED
    - $schema-parent[ReferencedDescID] = $desc-id
    - $database[DescID] = $desc-id
    - joinTargetNode($schema-parent, $schema-parent-target, $schema-parent-node)
    - joinTargetNode($database, $database-target, $database-node)
- name: object dropped before parent schema
  from: object-parent-node
  kind: Precedence
  to: schema-node
  query:
    - $object-parent[Type] = '*scpb.ObjectParent'
    - $schema[Type] = '*scpb.Schema'
    - toAbsent($object-parent-target, $schema-target)
    - $object-parent-node[CurrentStatus] = ABSENT
    - $schema-node[CurrentStatus] = DROPPED
    - joinReferencedDescID($object-parent, $schema, $desc-id)
    - joinTargetNode($object-parent, $object-parent-target, $object-parent-node)
    - joinTargetNode($schema, $schema-target, $schema-node)
- name: secondary region locality removed before dropping multi-region enum type
  from: secondary-region-node
  kind: Precedence
  to: enum-type-node
  query:
    - $secondary-region[Type] = '*scpb.TableLocalitySecondaryRegion'
    - $enum-type[Type] = '*scpb.EnumType'
    - toAbsent($secondary-region-target, $enum-type-target)
    - $secondary-region-node[CurrentStatus] = ABSENT
    - $enum-type-node[CurrentStatus] = DROPPED
    - joinReferencedDescID($secondary-region, $enum-type, $desc-id)
    - joinTargetNode($secondary-region, $secondary-region-target, $secondary-region-node)
    - joinTargetNode($enum-type, $enum-type-target, $enum-type-node)
- name: check constraint removed before dropping dependent types and sequences
  from: check-constraint-node
  kind: Precedence
  to: dependent-node
  query:
    - $check-constraint[Type] = '*scpb.CheckConstraint'
    - $dependent[Type] IN ['*scpb.AliasType', '*scpb.EnumType', '*scpb.Sequence']
    - toAbsent($check-constraint-target, $dependent-target)
    - $check-constraint-node[CurrentStatus] = ABSENT
    - $dependent-node[CurrentStatus] = DROPPED
    - checkConstraintDependsOn(*scpb.CheckConstraint, scpb.Element)($check-constraint, $dependent)
    - joinTargetNode($check-constraint, $check-constraint-target, $check-constraint-node)
    - joinTargetNode($dependent, $dependent-target, $dependent-node)
- name: FK removed before dropping dependent table
  from: foreign-key-node
  kind: Precedence
  to: table-node
  query:
    - $foreign-key[Type] = '*scpb.ForeignKeyConstraint'
    - $table[Type] = '*scpb.Table'
    - toAbsent($foreign-key-target, $table-target)
    - $foreign-key-node[CurrentStatus] = ABSENT
    - $table-node[CurrentStatus] = DROPPED
    - joinReferencedDescID($foreign-key, $table, $desc-id)
    - joinTargetNode($foreign-key, $foreign-key-target, $foreign-key-node)
    - joinTargetNode($table, $table-target, $table-node)
- name: index partial predicate removed before dropping dependent types
  from: index-partial-node
  kind: Precedence
  to: dependent-type-node
  query:
    - $index-partial[Type] = '*scpb.SecondaryIndexPartial'
    - $dependent-type[Type] IN ['*scpb.AliasType', '*scpb.EnumType']
    - toAbsent($index-partial-target, $dependent-type-target)
    - $index-partial-node[CurrentStatus] = ABSENT
    - $dependent-type-node[CurrentStatus] = DROPPED
    - indexPartialDependsOn(*scpb.SecondaryIndexPartial, scpb.Element)($index-partial, $dependent-type)
    - joinTargetNode($index-partial, $index-partial-target, $index-partial-node)
    - joinTargetNode($dependent-type, $dependent-type-target, $dependent-type-node)
- name: column type removed before dropping dependent types
  from: column-type-node
  kind: Precedence
  to: dependent-type-node
  query:
    - $column-type[Type] = '*scpb.ColumnType'
    - $dependent-type[Type] IN ['*scpb.AliasType', '*scpb.EnumType']
    - toAbsent($column-type-target, $dependent-type-target)
    - $column-type-node[CurrentStatus] = ABSENT
    - $dependent-type-node[CurrentStatus] = DROPPED
    - columnTypeDependsOn(*scpb.ColumnType, scpb.Element)($column-type, $dependent-type)
    - joinTargetNode($column-type, $column-type-target, $column-type-node)
    - joinTargetNode($dependent-type, $dependent-type-target, $dependent-type-node)
- name: column DEFAULT removed before dropping dependent types and sequences
  from: default-expr-node
  kind: Precedence
  to: dependent-node
  query:
    - $default-expr[Type] = '*scpb.ColumnDefaultExpression'
    - $dependent[Type] IN ['*scpb.AliasType', '*scpb.EnumType', '*scpb.Sequence']
    - toAbsent($default-expr-target, $dependent-target)
    - $default-expr-node[CurrentStatus] = ABSENT
    - $dependent-node[CurrentStatus] = DROPPED
    - columnDefaultDependsOn(*scpb.ColumnDefaultExpression, scpb.Element)($default-expr, $dependent)
    - joinTargetNode($default-expr, $default-expr-target, $default-expr-node)
    - joinTargetNode($dependent, $dependent-target, $dependent-node)
- name: column ON UPDATE removed before dropping dependent types and sequences
  from: on-update-expr-node
  kind: Precedence
  to: dependent-node
  query:
    - $on-update-expr[Type] = '*scpb.ColumnOnUpdateExpression'
    - $dependent[Type] IN ['*scpb.AliasType', '*scpb.EnumType', '*scpb.Sequence']
    - toAbsent($on-update-expr-target, $dependent-target)
    - $on-update-expr-node[CurrentStatus] = ABSENT
    - $dependent-node[CurrentStatus] = DROPPED
    - columnOnUpdateDependsOn(*scpb.ColumnOnUpdateExpression, scpb.Element)($on-update-expr, $dependent)
    - joinTargetNode($on-update-expr, $on-update-expr-target, $on-update-expr-node)
    - joinTargetNode($dependent, $dependent-target, $dependent-node)
- name: sequence ownership removed before dropping sequence
  from: sequence-owner-node
  kind: Precedence
  to: sequence-node
  query:
    - $sequence-owner[Type] = '*scpb.SequenceOwner'
    - $sequence[Type] = '*scpb.Sequence'
    - toAbsent($sequence-owner-target, $sequence-target)
    - $sequence-owner-node[CurrentStatus] = ABSENT
    - $sequence-node[CurrentStatus] = DROPPED
    - joinReferencedDescID($sequence-owner, $sequence, $desc-id)
    - joinTargetNode($sequence-owner, $sequence-owner-target, $sequence-owner-node)
    - joinTargetNode($sequence, $sequence-target, $sequence-node)
- name: database region config removed before dropping multi-region enum type
  from: region-config-node
  kind: Precedence
  to: enum-type-node
  query:
    - $region-config[Type] = '*scpb.DatabaseRegionConfig'
    - $enum-type[Type] = '*scpb.EnumType'
    - toAbsent($region-config-target, $enum-type-target)
    - $region-config-node[CurrentStatus] = ABSENT
    - $enum-type-node[CurrentStatus] = DROPPED
    - joinReferencedDescID($region-config, $enum-type, $desc-id)
    - joinTargetNode($region-config, $region-config-target, $region-config-node)
    - joinTargetNode($enum-type, $enum-type-target, $enum-type-node)
- name: database region config removed before dropping multi-region enum type
  from: region-config-node
  kind: Precedence
  to: enum-type-node
  query:
    - $region-config[Type] = '*scpb.DatabaseRegionConfig'
    - $enum-type[Type] = '*scpb.EnumType'
    - toAbsent($region-config-target, $enum-type-target)
    - $region-config-node[CurrentStatus] = ABSENT
    - $enum-type-node[CurrentStatus] = DROPPED
    - joinReferencedDescID($region-config, $enum-type, $desc-id)
    - joinTargetNode($region-config, $region-config-target, $region-config-node)
    - joinTargetNode($enum-type, $enum-type-target, $enum-type-node)
- name: dependent element removal before descriptor drop
  from: element-node
  kind: Precedence
  to: relation-node
  query:
    - $element[Type] IN ['*scpb.ColumnFamily', '*scpb.UniqueWithoutIndexConstraint', '*scpb.CheckConstraint', '*scpb.ForeignKeyConstraint', '*scpb.TableComment', '*scpb.TableLocalityGlobal', '*scpb.TableLocalityPrimaryRegion', '*scpb.TableLocalitySecondaryRegion', '*scpb.TableLocalityRegionalByRow', '*scpb.ColumnName', '*scpb.ColumnDefaultExpression', '*scpb.ColumnOnUpdateExpression', '*scpb.ColumnComment', '*scpb.SequenceOwner', '*scpb.IndexName', '*scpb.IndexPartitioning', '*scpb.IndexComment', '*scpb.ConstraintName', '*scpb.ConstraintComment', '*scpb.Namespace', '*scpb.Owner', '*scpb.UserPrivileges', '*scpb.DatabaseRoleSetting', '*scpb.DatabaseRegionConfig', '*scpb.DatabaseComment', '*scpb.SchemaParent', '*scpb.SchemaComment', '*scpb.ObjectParent']
    - $relation[Type] IN ['*scpb.Database', '*scpb.Schema', '*scpb.Table', '*scpb.View', '*scpb.Sequence', '*scpb.AliasType', '*scpb.EnumType']
    - toAbsent($element-target, $relation-target)
    - $element-node[CurrentStatus] = ABSENT
    - $relation-node[CurrentStatus] = DROPPED
    - joinOnDescID($element, $relation, $desc-id)
    - joinTargetNode($element, $element-target, $element-node)
    - joinTargetNode($relation, $relation-target, $relation-node)
- name: dependent element removal right after descriptor removal
  from: relation-node
  kind: SameStagePrecedence
  to: element-node
  query:
    - $relation[Type] IN ['*scpb.Table', '*scpb.View']
    - $element[Type] IN ['*scpb.Column', '*scpb.PrimaryIndex', '*scpb.SecondaryIndex', '*scpb.RowLevelTTL']
    - toAbsentInAbsent($relation-target, $relation-node, $element-target, $element-node)
    - joinOnDescID($relation, $element, $desc-id)
    - joinTargetNode($relation, $relation-target, $relation-node)
    - joinTargetNode($element, $element-target, $element-node)
- name: primary index swap
  from: old-index-node
  kind: SameStagePrecedence
  to: new-index-node
  query:
    - $old-index[Type] = '*scpb.PrimaryIndex'
    - $new-index[Type] = '*scpb.PrimaryIndex'
    - joinOnDescID($old-index, $new-index, $table-id)
    - $old-index-target[TargetStatus] = ABSENT
    - $new-index-target[TargetStatus] = PUBLIC
    - $old-index-node[CurrentStatus] = VALIDATED
    - $new-index-node[CurrentStatus] = PUBLIC
    - new-primary-index-depends-on-old(*scpb.PrimaryIndex, *scpb.PrimaryIndex)($new-index, $old-index)
    - joinTargetNode($old-index, $old-index-target, $old-index-node)
    - joinTargetNode($new-index, $new-index-target, $new-index-node)
- name: reverting primary index swap
  from: new-index-node
  kind: SameStagePrecedence
  to: old-index-node
  query:
    - $new-index[Type] = '*scpb.PrimaryIndex'
    - $old-index[Type] = '*scpb.PrimaryIndex'
    - joinOnDescID($new-index, $old-index, $table-id)
    - $new-index-target[TargetStatus] = ABSENT
    - $old-index-target[TargetStatus] = PUBLIC
    - $new-index-node[CurrentStatus] = VALIDATED
    - $old-index-node[CurrentStatus] = PUBLIC
    - new-primary-index-depends-on-old(*scpb.PrimaryIndex, *scpb.PrimaryIndex)($new-index, $old-index)
    - joinTargetNode($new-index, $new-index-target, $new-index-node)
    - joinTargetNode($old-index, $old-index-target, $old-index-node)
- name: index existence precedes index dependents
  from: index-node
  kind: Precedence
  to: index-dependent-node
  query:
    - $index[Type] IN ['*scpb.PrimaryIndex', '*scpb.SecondaryIndex']
    - $index-dependent[Type] IN ['*scpb.IndexName', '*scpb.IndexPartitioning', '*scpb.IndexComment']
    - joinOnIndexID($index, $index-dependent, $table-id, $index-id)
    - $index-target[TargetStatus] = PUBLIC
    - $index-dependent-target[TargetStatus] = PUBLIC
    - $index-node[CurrentStatus] = BACKFILL_ONLY
    - $index-dependent-node[CurrentStatus] = PUBLIC
    - joinTargetNode($index, $index-target, $index-node)
    - joinTargetNode($index-dependent, $index-dependent-target, $index-dependent-node)
- name: partitioning set right after temp index existence
  from: temp-index-node
  kind: SameStagePrecedence
  to: index-partitioning-node
  query:
    - $temp-index[Type] = '*scpb.TemporaryIndex'
    - $index-partitioning[Type] = '*scpb.IndexPartitioning'
    - joinOnIndexID($temp-index, $index-partitioning, $table-id, $index-id)
    - $temp-index-target[TargetStatus] = TRANSIENT_ABSENT
    - $index-partitioning-target[TargetStatus] = PUBLIC
    - $temp-index-node[CurrentStatus] = DELETE_ONLY
    - $index-partitioning-node[CurrentStatus] = PUBLIC
    - joinTargetNode($temp-index, $temp-index-target, $temp-index-node)
    - joinTargetNode($index-partitioning, $index-partitioning-target, $index-partitioning-node)
- name: partial predicate set right after secondary index existence
  from: index-node
  kind: SameStagePrecedence
  to: index-predicate-node
  query:
    - $index[Type] = '*scpb.SecondaryIndex'
    - $index-predicate[Type] = '*scpb.SecondaryIndexPartial'
    - joinOnIndexID($index, $index-predicate, $table-id, $index-id)
    - $index-target[TargetStatus] = PUBLIC
    - $index-predicate-target[TargetStatus] = PUBLIC
    - $index-node[CurrentStatus] = BACKFILL_ONLY
    - $index-predicate[CurrentStatus] = PUBLIC
    - joinTargetNode($index, $index-target, $index-node)
    - joinTargetNode($index-predicate, $index-predicate-target, $index-predicate-node)
- name: dependents existence precedes writes to index
  from: child-node
  kind: Precedence
  to: index-node
  query:
    - $child[Type] IN ['*scpb.IndexPartitioning', '*scpb.IndexComment']
    - $index[Type] IN ['*scpb.PrimaryIndex', '*scpb.SecondaryIndex']
    - joinOnIndexID($child, $index, $table-id, $index-id)
    - $child-target[TargetStatus] = PUBLIC
    - $index-target[TargetStatus] = PUBLIC
    - $child-node[CurrentStatus] = PUBLIC
    - $index-node[CurrentStatus] = WRITE_ONLY
    - joinTargetNode($child, $child-target, $child-node)
    - joinTargetNode($index, $index-target, $index-node)
- name: index named right before index becomes public
  from: index-name-node
  kind: SameStagePrecedence
  to: index-node
  query:
    - $index-name[Type] = '*scpb.IndexName'
    - $index[Type] IN ['*scpb.PrimaryIndex', '*scpb.SecondaryIndex']
    - $index-name-target[TargetStatus] = PUBLIC
    - $index-target[TargetStatus] = PUBLIC
    - $index-name-node[CurrentStatus] = PUBLIC
    - $index-node[CurrentStatus] = PUBLIC
    - joinOnIndexID($index-name, $index, $table-id, $index-id)
    - joinTargetNode($index-name, $index-name-target, $index-name-node)
    - joinTargetNode($index, $index-target, $index-node)
- name: dependents removed after index no longer public
  from: child-node
  kind: SameStagePrecedence
  to: index-node
  query:
    - $child[Type] IN ['*scpb.IndexName', '*scpb.IndexPartitioning', '*scpb.SecondaryIndexPartial', '*scpb.IndexComment']
    - $index[Type] IN ['*scpb.PrimaryIndex', '*scpb.SecondaryIndex']
    - joinOnIndexID($child, $index, $table-id, $index-id)
    - toAbsent($child-target, $index-target)
    - $child-node[CurrentStatus] = ABSENT
    - $index-node[CurrentStatus] = VALIDATED
    - joinTargetNode($child, $child-target, $child-node)
    - joinTargetNode($index, $index-target, $index-node)
- name: dependents removed before index
  from: dependent-node
  kind: Precedence
  to: index-node
  query:
    - $dependent[Type] IN ['*scpb.IndexName', '*scpb.IndexPartitioning', '*scpb.SecondaryIndexPartial', '*scpb.IndexComment']
    - $index[Type] IN ['*scpb.PrimaryIndex', '*scpb.SecondaryIndex']
    - joinOnIndexID($dependent, $index, $table-id, $index-id)
    - $dependent-target[TargetStatus] = ABSENT
    - $index-target[TargetStatus] = ABSENT
    - $dependent-node[CurrentStatus] = ABSENT
    - $index-node[CurrentStatus] = ABSENT
    - joinTargetNode($dependent, $dependent-target, $dependent-node)
    - joinTargetNode($index, $index-target, $index-node)
- name: temp index is WRITE_ONLY before backfill
  from: temp-node
  kind: Precedence
  to: index-node
  query:
    - $temp[Type] = '*scpb.TemporaryIndex'
    - $index[Type] IN ['*scpb.PrimaryIndex', '*scpb.SecondaryIndex']
    - joinOnDescID($temp, $index, $desc-id)
    - $temp[IndexID] = $temp-index-id
    - $index[TemporaryIndexID] = $temp-index-id
    - $temp-target[TargetStatus] = TRANSIENT_ABSENT
    - $index-target[TargetStatus] = PUBLIC
    - $temp-node[CurrentStatus] = WRITE_ONLY
    - $index-node[CurrentStatus] = BACKFILLED
    - joinTargetNode($temp, $temp-target, $temp-node)
    - joinTargetNode($index, $index-target, $index-node)
- name: column name set right after column existence
  from: column-node
  kind: SameStagePrecedence
  to: column-name-node
  query:
    - $column[Type] = '*scpb.Column'
    - $column-name[Type] = '*scpb.ColumnName'
    - $column-target[TargetStatus] = PUBLIC
    - $column-name-target[TargetStatus] = PUBLIC
    - $column-node[CurrentStatus] = DELETE_ONLY
    - $column-name-node[CurrentStatus] = PUBLIC
    - joinOnColumnID($column, $column-name, $table-id, $col-id)
    - joinTargetNode($column, $column-target, $column-node)
    - joinTargetNode($column-name, $column-name-target, $column-name-node)
- name: column existence precedes column dependents
  from: column-node
  kind: Precedence
  to: dependent-node
  query:
    - $column[Type] = '*scpb.Column'
    - $dependent[Type] IN ['*scpb.ColumnName', '*scpb.ColumnDefaultExpression', '*scpb.ColumnOnUpdateExpression', '*scpb.ColumnComment']
    - joinOnColumnID($column, $dependent, $table-id, $col-id)
    - $column-target[TargetStatus] = PUBLIC
    - $dependent-target[TargetStatus] = PUBLIC
    - $column-node[CurrentStatus] = DELETE_ONLY
    - $dependent-node[CurrentStatus] = PUBLIC
    - joinTargetNode($column, $column-target, $column-node)
    - joinTargetNode($dependent, $dependent-target, $dependent-node)
- name: DEFAULT or ON UPDATE existence precedes writes to column
  from: expr-node
  kind: Precedence
  to: column-node
  query:
    - $expr[Type] IN ['*scpb.ColumnDefaultExpression', '*scpb.ColumnOnUpdateExpression']
    - $column[Type] = '*scpb.Column'
    - joinOnColumnID($expr, $column, $table-id, $col-id)
    - $expr-target[TargetStatus] = PUBLIC
    - $column-target[TargetStatus] = PUBLIC
    - $expr-node[CurrentStatus] = PUBLIC
    - $column-node[CurrentStatus] = WRITE_ONLY
    - joinTargetNode($expr, $expr-target, $expr-node)
    - joinTargetNode($column, $column-target, $column-node)
- name: column named right before column type becomes public
  from: column-name-node
  kind: SameStagePrecedence
  to: column-type-node
  query:
    - $column-name[Type] = '*scpb.ColumnName'
    - $column-type[Type] = '*scpb.ColumnType'
    - joinOnColumnID($column-name, $column-type, $table-id, $col-id)
    - $column-name-target[TargetStatus] = PUBLIC
    - $column-type-target[TargetStatus] = PUBLIC
    - $column-name-node[CurrentStatus] = PUBLIC
    - $column-type-node[CurrentStatus] = PUBLIC
    - joinTargetNode($column-name, $column-name-target, $column-name-node)
    - joinTargetNode($column-type, $column-type-target, $column-type-node)
- name: column comment exists before column becomes public
  from: column-comment-node
  kind: Precedence
  to: column-node
  query:
    - $column-comment[Type] = '*scpb.ColumnComment'
    - $column[Type] = '*scpb.Column'
    - joinOnColumnID($column-comment, $column, $table-id, $col-id)
    - $column-comment-target[TargetStatus] = PUBLIC
    - $column-target[TargetStatus] = PUBLIC
    - $column-comment-node[CurrentStatus] = PUBLIC
    - $column-node[CurrentStatus] = PUBLIC
    - joinTargetNode($column-comment, $column-comment-target, $column-comment-node)
    - joinTargetNode($column, $column-target, $column-node)
- name: column dependents removed after column no longer public
  from: column-node
  kind: Precedence
  to: dependent-node
  query:
    - $column[Type] = '*scpb.Column'
    - $dependent[Type] IN ['*scpb.ColumnType', '*scpb.ColumnName', '*scpb.ColumnComment']
    - joinOnColumnID($column, $dependent, $table-id, $col-id)
    - $column-target[TargetStatus] = ABSENT
    - $dependent-target[TargetStatus] = ABSENT
    - $column-node[CurrentStatus] = WRITE_ONLY
    - $dependent-node[CurrentStatus] = ABSENT
    - joinTargetNode($column, $column-target, $column-node)
    - joinTargetNode($dependent, $dependent-target, $dependent-node)
- name: column type dependents removed right before column type
  from: dependent-node
  kind: SameStagePrecedence
  to: column-type-node
  query:
    - $dependent[Type] IN ['*scpb.SequenceOwner', '*scpb.ColumnDefaultExpression', '*scpb.ColumnOnUpdateExpression']
    - $column-type[Type] = '*scpb.ColumnType'
    - joinOnColumnID($dependent, $column-type, $table-id, $col-id)
    - $dependent-target[TargetStatus] = ABSENT
    - $column-type-target[TargetStatus] = ABSENT
    - $dependent-node[CurrentStatus] = ABSENT
    - $column-type-node[CurrentStatus] = ABSENT
    - joinTargetNode($dependent, $dependent-target, $dependent-node)
    - joinTargetNode($column-type, $column-type-target, $column-type-node)
- name: dependents removed before column
  from: dependent-node
  kind: Precedence
  to: column-node
  query:
    - $dependent[Type] IN ['*scpb.ColumnName', '*scpb.ColumnType', '*scpb.ColumnComment']
    - $column[Type] = '*scpb.Column'
    - joinOnColumnID($dependent, $column, $table-id, $col-id)
    - $dependent-target[TargetStatus] = ABSENT
    - $column-target[TargetStatus] = ABSENT
    - $dependent-node[CurrentStatus] = ABSENT
    - $column-node[CurrentStatus] = ABSENT
    - joinTargetNode($dependent, $dependent-target, $dependent-node)
    - joinTargetNode($column, $column-target, $column-node)
- name: column type removed right before column when not dropping relation
  from: column-type-node
  kind: SameStagePrecedence
  to: column-node
  query:
    - $column-type[Type] = '*scpb.ColumnType'
    - $column[Type] = '*scpb.Column'
    - joinOnColumnID($column-type, $column, $table-id, $col-id)
    - $column-type-target[TargetStatus] = ABSENT
    - $column-target[TargetStatus] = ABSENT
    - $column-type-node[CurrentStatus] = ABSENT
    - $column-node[CurrentStatus] = ABSENT
    - columnTypeIsNotBeingDropped(*scpb.ColumnType)($column-type)
    - joinTargetNode($column-type, $column-type-target, $column-type-node)
    - joinTargetNode($column, $column-target, $column-node)
- name: partial predicate removed right before secondary index when not dropping relation
  from: partial-predicate-node
  kind: SameStagePrecedence
  to: index-node
  query:
    - $partial-predicate[Type] = '*scpb.SecondaryIndexPartial'
    - $index[Type] = '*scpb.SecondaryIndex'
    - joinOnIndexID($partial-predicate, $index, $table-id, $index-id)
    - $partial-predicate-target[TargetStatus] = ABSENT
    - $index-target[TargetStatus] = ABSENT
    - $partial-predicate-node[CurrentStatus] = ABSENT
    - $index-node[CurrentStatus] = ABSENT
    - secondaryIndexPartialIsNotBeingDropped(*scpb.SecondaryIndexPartial)($partial-predicate)
    - joinTargetNode($partial-predicate, $partial-predicate-target, $partial-predicate-node)
    - joinTargetNode($index, $index-target, $index-node)
- name: column depends on primary index
  from: index-node
  kind: Precedence
  to: column-node
  query:
    - $index[Type] = '*scpb.PrimaryIndex'
    - $column[Type] = '*scpb.Column'
    - $index-target[TargetStatus] = PUBLIC
    - $column-target[TargetStatus] = PUBLIC
    - $index[DescID] = $table-id
    - $column[DescID] = $table-id
    - columnFeaturedInIndex(*scpb.Column, scpb.Element)($column, $index)
    - $status IN [WRITE_ONLY, PUBLIC]
    - $index-node[CurrentStatus] = $status
    - $column-node[CurrentStatus] = $status
    - joinTargetNode($index, $index-target, $index-node)
    - joinTargetNode($column, $column-target, $column-node)
- name: primary index should be cleaned up before newly added column when reverting
  from: index-node
  kind: Precedence
  to: column-node
  query:
    - $index[Type] = '*scpb.PrimaryIndex'
    - $column[Type] = '*scpb.Column'
    - toAbsent($index-target, $column-target)
    - joinOnDescID($index, $column, $table-id)
    - columnFeaturedInIndex(*scpb.Column, *scpb.PrimaryIndex)($column, $index)
    - $status = WRITE_ONLY
    - $index-node[CurrentStatus] = $status
    - $column-node[CurrentStatus] = $status
    - joinTargetNode($index, $index-target, $index-node)
    - joinTargetNode($column, $column-target, $column-node)
- name: column existence precedes index existence
  from: column-node
  kind: Precedence
  to: index-node
  query:
    - $column[Type] = '*scpb.Column'
    - $index[Type] IN ['*scpb.PrimaryIndex', '*scpb.SecondaryIndex']
    - $column-target[TargetStatus] = PUBLIC
    - $index-target[TargetStatus] = PUBLIC
    - $column-node[CurrentStatus] = DELETE_ONLY
    - $index-node[CurrentStatus] = BACKFILL_ONLY
    - $column[DescID] = $table-id
    - $index[DescID] = $table-id
    - columnFeaturedInIndex(*scpb.Column, scpb.Element)($column, $index)
    - joinTargetNode($column, $column-target, $column-node)
    - joinTargetNode($index, $index-target, $index-node)
- name: column existence precedes temporary index existence
  from: column-node
  kind: Precedence
  to: temp-index-node
  query:
    - $column[Type] = '*scpb.Column'
    - $temp-index[Type] = '*scpb.TemporaryIndex'
    - $column[DescID] = $table-id
    - $temp-index[DescID] = $table-id
    - $column-target[TargetStatus] = PUBLIC
    - $temp-index-target[TargetStatus] = TRANSIENT_ABSENT
    - $column-node[CurrentStatus] = DELETE_ONLY
    - $temp-index-node[CurrentStatus] = DELETE_ONLY
    - columnFeaturedInIndex(*scpb.Column, scpb.Element)($column, $temp-index)
    - joinTargetNode($column, $column-target, $column-node)
    - joinTargetNode($temp-index, $temp-index-target, $temp-index-node)
- name: primary index with new columns should exist before secondary/temp indexes
  from: primary-index-node
  kind: Precedence
  to: second-index-node
  query:
    - $primary-index[Type] = '*scpb.PrimaryIndex'
    - $second-index[Type] IN ['*scpb.SecondaryIndex', '*scpb.TemporaryIndex']
    - joinOnDescID($primary-index, $second-index, $table-id)
    - $primary-index-target[TargetStatus] = PUBLIC
    - $second-index-target[TargetStatus] = PUBLIC
    - $primary-index-node[CurrentStatus] = VALIDATED
    - $second-index-node[CurrentStatus] = BACKFILL_ONLY
    - newColumnFeaturedInIndex(*scpb.PrimaryIndex, scpb.Element)($primary-index, $second-index)
    - joinTargetNode($primary-index, $primary-index-target, $primary-index-node)
    - joinTargetNode($second-index, $second-index-target, $second-index-node)
- name: secondary indexes should be cleaned up before any primary index with columns when reverting
  from: second-index-node
  kind: Precedence
  to: primary-index-node
  query:
    - $second-index[Type] IN ['*scpb.SecondaryIndex', '*scpb.TemporaryIndex']
    - $primary-index[Type] = '*scpb.PrimaryIndex'
    - joinOnDescID($second-index, $primary-index, $table-id)
    - toAbsent($second-index-target, $primary-index-target)
    - $second-index-node[CurrentStatus] = ABSENT
    - $primary-index-node[CurrentStatus] = VALIDATED
    - newColumnFeaturedInIndex(scpb.Element, *scpb.PrimaryIndex)($second-index, $primary-index)
    - joinTargetNode($second-index, $second-index-target, $second-index-node)
    - joinTargetNode($primary-index, $primary-index-target, $primary-index-node)
- name: ensure columns are in increasing order
  from: later-column-node
  kind: SameStagePrecedence
  to: earlier-column-node
  query:
    - $later-column[Type] = '*scpb.Column'
    - $earlier-column[Type] = '*scpb.Column'
    - $later-column[DescID] = $table-id
    - $earlier-column[DescID] = $table-id
    - $later-column-target[TargetStatus] = PUBLIC
    - $earlier-column-target[TargetStatus] = PUBLIC
    - $status IN [WRITE_ONLY, PUBLIC]
    - $later-column-node[CurrentStatus] = $status
    - $earlier-column-node[CurrentStatus] = $status
    - columnHasSmallerID(*scpb.Column, *scpb.Column)($later-column, $earlier-column)
    - joinTargetNode($later-column, $later-column-target, $later-column-node)
    - joinTargetNode($earlier-column, $earlier-column-target, $earlier-column-node)
